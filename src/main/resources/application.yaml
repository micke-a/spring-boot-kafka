spring:
  application:
    name: spring-boot-kafka
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.DelegatingByTopicSerializer
      # This is the main bit signalling transactionality
      transaction-id-prefix: kafka-tx-
      properties:
        schema.registry.url: http://localhost:8081
        spring.kafka.value.serialization.bytopic.default: org.apache.kafka.common.serialization.StringSerializer
        spring.kafka.value.serialization.bytopic.config: "${app.kafka.orders-topic-name}:io.confluent.kafka.serializers.KafkaAvroSerializer"
        # Enable header propagation for producers
        header.propagation.enabled: true

      # to ensure that the producer waits for all replicas to acknowledge the write before considering it successful
      acks: all
      retries: 3

    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.DelegatingByTopicDeserializer
      group-id: ${spring.application.name}-group
      auto-offset-reset: earliest
      properties:
        isolation.level: read_committed
        schema.registry.url: http://localhost:8081
        specific.avro.reader: true
        spring.kafka.value.serialization.bytopic.default: org.apache.kafka.common.serialization.StringDeserializer
        spring.kafka.value.serialization.bytopic.config: "${app.kafka.orders-topic-name}:io.confluent.kafka.serializers.KafkaAvroDeserializer"
        # Enable header propagation for consumers
        header.propagation.enabled: true
    template:
      observation-enabled: true
    listener:
      observation-enabled: true
management:
#  zipkin:
#    tracing:
#      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    enabled: true
    sampling:
      probability: 1.0
    propagation:
      type: b3, b3_multi, w3c
  endpoints:
    web:
      exposure:
        include: prometheus
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
  prometheus:
    metrics:
      export:
        enabled: true
        step: 1m
        descriptions: true

logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%X{traceId}/%X{spanId}] %-5level %logger{36} - %msg%n"
  level:
    root: info
    me.mikael: debug
#    org.springframework.transaction: trace
#    org.springframework.kafka.transaction: debug
    org.springframework.kafka: warn
    org.apache.kafka: warn
    io.confluent.kafka: warn


app:
  kafka:
    source-topic-name: me-mikael-kafka-source-v001
    orders-topic-name: me-mikael-kafka-orders-v001